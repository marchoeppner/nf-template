// TODO: add any custom pipeline parameters here
params {

    input           = null
    outdir          = "results"

    help            = false

    logo            = "${baseDir}/assets/pipelinelogo.png"
    run_name        = null

    plaintext_email = false
    skip_multiqc    = false
    email           = false

    conda.enabled   = false
    singularity.enabled = false
    docker.enabled  = false

    max_memory      = 128.GB
    max_cpus        = 16
    max_time        = 240.h
    maxMultiqcEmailFileSize = 25.MB

}

// TODO: update name and version of pipeline, author name and URL
manifest {
    name = "marchoeppner/pipeline"
    version = "0.0"
    description = "Pipeline"
    author = "Author Name"
    homePage = "https://github.com/marchoeppner/pipeline"
    nextflowVersion = "23.10.0"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
}
report {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_report.html"
}
trace {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
}
dag {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// TODO: Update name of container, if any - else remove
process.container = 'user/xxx:dev'

profiles {

    standard {
        includeConfig 'conf/local.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
    }
    lsh {
        includeConfig 'conf/lsh.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
    }
    docker { 
        docker.enabled = true 
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true 
    }
    test {
        includeConfig 'conf/test.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

